// Prisma schema for Decksy AI
// Maintains alignment with MVP data model described in Project_Spec.md

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String          @id @default(cuid())
  email         String          @unique
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  profile       Profile?
  recommendations Recommendation[]
  feedback      Feedback[]
  billing       Billing?
}

model Profile {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique
  playerTag String?
  trophies  Int?
  arena     String?
  playstyle String?
  updatedAt DateTime @updatedAt
}

model DeckCatalog {
  id            String   @id @default(cuid())
  slug          String   @unique
  name          String
  archetype     String
  description   String
  averageElixir Float
  cards         Json
  strengths     Json
  weaknesses    Json
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  recommendations Recommendation[]
  explainers    Explainer[]
}

model Recommendation {
  id             String     @id @default(cuid())
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  sessionId      String     @unique
  playerTag      String
  trophyRange    String
  arena          String
  playstyle      String
  rationale      Json
  scoreBreakdown Json
  decks          Json
  user           User?      @relation(fields: [userId], references: [id])
  userId         String?
  deckCatalog    DeckCatalog? @relation(fields: [deckCatalogId], references: [id])
  deckCatalogId  String?
  feedback       Feedback[]
  explainers     Explainer[]
}

model Explainer {
  id                String       @id @default(cuid())
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  deck              DeckCatalog  @relation(fields: [deckId], references: [id])
  deckId            String
  recommendation    Recommendation? @relation(fields: [recommendationId], references: [id])
  recommendationId  String?
  summary           String
  substitutions     Json
  matchupTips       Json
}

model Feedback {
  id               String       @id @default(cuid())
  createdAt        DateTime     @default(now())
  recommendation   Recommendation @relation(fields: [recommendationId], references: [id])
  recommendationId String
  user             User?        @relation(fields: [userId], references: [id])
  userId           String?
  rating           Int
  notes            String?
}

model Billing {
  id              String   @id @default(cuid())
  user            User     @relation(fields: [userId], references: [id])
  userId          String   @unique
  stripeCustomerId String?
  stripeSubscriptionId String?
  plan            String   @default("free")
  renewedAt       DateTime?
}

model AuditLog {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  actorId   String?
  action    String
  metadata  Json
}
